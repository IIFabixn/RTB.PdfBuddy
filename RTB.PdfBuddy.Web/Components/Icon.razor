@using RTB.BlazorUI.Extensions
@inject HttpClient HttpClient

@inherits RTBComponent

@code {
    [Parameter] public string IconName { get; set; } = string.Empty;
	[Parameter] public string Width { get; set; } = "24";
	[Parameter] public string Height { get; set; } = "24";

    private string SvgContent { get; set; } = string.Empty;
    private static readonly Dictionary<string, string> IconCache = new();

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(IconName))
        {
            return;
        }

        try
        {
            var svgPath = $"img/{IconName}.svg";
            if (!IconCache.TryGetValue(svgPath, out var cachedSvg))
            {
                cachedSvg = await HttpClient.GetStringAsync(svgPath);
                IconCache[svgPath] = cachedSvg;
            }

            SvgContent = InjectSizeAttributes(cachedSvg);
        }
        catch
        {
            SvgContent = "<!-- SVG not found -->";
        }
    }

    private string InjectSizeAttributes(string svg)
    {
        // Find the opening <svg> tag
        var svgTagStart = svg.IndexOf("<svg", StringComparison.OrdinalIgnoreCase);
        if (svgTagStart == -1)
        {
            return svg; // Return as-is if no <svg> tag is found
        }

        // Find the closing > of the <svg> tag
        var svgTagEnd = svg.IndexOf(">", svgTagStart, StringComparison.OrdinalIgnoreCase);
        if (svgTagEnd == -1)
        {
            return svg; // Return as-is if the <svg> tag is malformed
        }

        // Extract the <svg> tag
        var svgTag = svg.Substring(svgTagStart, svgTagEnd - svgTagStart + 1);

        // Replace or add the width attribute
        if (svgTag.Contains("width=", StringComparison.OrdinalIgnoreCase))
        {
            svgTag = System.Text.RegularExpressions.Regex.Replace(svgTag, @"width\s*=\s*""[^""]*""", $"width=\"{Width}\"", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
        }
        else
        {
            svgTag = svgTag.Insert(svgTag.Length - 1, $" width=\"{Width}\"");
        }

        // Replace or add the height attribute
        if (svgTag.Contains("height=", StringComparison.OrdinalIgnoreCase))
        {
            svgTag = System.Text.RegularExpressions.Regex.Replace(svgTag, @"height\s*=\s*""[^""]*""", $"height=\"{Height}\"", System.Text.RegularExpressions.RegexOptions.IgnoreCase);
        }
        else
        {
            svgTag = svgTag.Insert(svgTag.Length - 1, $" height=\"{Height}\"");
        }

        // Replace the original <svg> tag with the modified one
        return svg.Replace(svg.Substring(svgTagStart, svgTagEnd - svgTagStart + 1), svgTag);
    }
}
<i @attributes="@CapturedAttributes">
    @((MarkupString)SvgContent)
</i>