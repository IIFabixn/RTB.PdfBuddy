@using PdfSharpCore.Pdf
@using RTB.BlazorUI.Extensions
@using RTB.BlazorUI.Services.BusyTracker
@using RTB.PdfBuddy.Web.Extensions
@using System.Collections.Concurrent

@inject IJSRuntime JSRuntime
@inject BusyTracker BusyTracker

@inherits RTBComponent

@code {
    [Parameter] public PdfPage? Page { get; set; }
}

<div class="@(thumbnail is null ? "animate-pulse" : string.Empty) @(CapturedAttributes.TryGetValue("class", out var classes) ? classes : string.Empty)"
    @attributes="@(CapturedAttributes.Without("class"))">
    <img class="w-auto h-full object-contain object-center" src="@thumbnail" />
</div>

@code 
{
    private static readonly Dictionary<string, string> ThumbnailCache = new();

    private string? thumbnail;

    private string? currentPageId;

    protected override void OnAfterRender(bool firstRender)
    {
        if (Page != null && currentPageId != Page.GetOrAssignId())
        {
            if (Page.Tag is not string key)
            {
                key = Page.GetOrAssignId();
            }

            currentPageId = key;

            if (ThumbnailCache.TryGetValue(key, out var cached))
            {
                thumbnail = cached;
                StateHasChanged(); // Trigger UI update
                return;
            }

            Task.Run(() => GenerateThumbnail(key));
        }
    }

    private async Task GenerateThumbnail(string key)
    {
        using (BusyTracker.Track($"LoadPdfView.{key}", StateHasChanged))
        {
            var pdfBytes = await Task.Run(Page.ExtractPageAsBytes);
            thumbnail = await JSRuntime.InvokeAsync<string>("pdfRenderer.renderPageThumbnail", new object[] { pdfBytes });
            ThumbnailCache[key] = thumbnail;
        }
    }
}
