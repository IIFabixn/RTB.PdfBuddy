@using PdfSharpCore.Pdf
@using RTB.BlazorUI.Extensions
@using RTB.BlazorUI.Services.BusyTracker
@using RTB.PdfBuddy.Shared
@using System.Collections.Concurrent
@using static RTB.BlazorUI.Services.BusyTracker.BusyTracker

@inject IJSRuntime JSRuntime
@inject IBusyTracker BusyTracker

@inherits RTBComponent

@code {
    [Parameter] public PdfPage? Page { get; set; }
}

<div class="h-full w-full @(thumbnail is null ? "animate-pulse" : string.Empty) @(CapturedAttributes.TryGetValue("class", out var classes) ? classes : string.Empty)"
    @attributes="@(CapturedAttributes.Without("class"))">
    <img class="w-auto h-full object-contain object-center" src="@thumbnail" alt="@(Page?.Owner.Info.Title ?? "Pdf view")" title="@(Page?.Owner.Info.Title)" />
</div>

@code 
{
    private static readonly SemaphoreSlim thumbnailSemaphore = new(8);
    private static readonly ConcurrentDictionary<string, string> ThumbnailCache = new();

    private string? thumbnail;

    private string? currentPageId;

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (Page != null && currentPageId != Page.GetOrAssignId())
        {
            if (Page.Tag is not string key)
            {
                key = Page.GetOrAssignId();
            }

            currentPageId = key;

            if (ThumbnailCache.TryGetValue(key, out var cached))
            {
                thumbnail = cached;
                StateHasChanged(); // Trigger UI update
                return Task.CompletedTask;
            }

            GenerateThumbnail(key);
        }
        
        return Task.CompletedTask;
    }

    private async Task GenerateThumbnail(string key)
    {
        if (Page is null) return;

        await thumbnailSemaphore.WaitAsync();
        using var busy = BusyTracker.Track($"LoadPdfView.{key}");
        var bytes = await Task.Run(Page.ExtractPageAsBytes);
        await RenderPageThumbnail(key, bytes);
    }

    private async Task RenderPageThumbnail(string key, byte[] pdfBytes)
    {
        thumbnail = await JSRuntime.InvokeAsync<string>("pdfRenderer.renderPageThumbnail", new object[] { pdfBytes });
        ThumbnailCache[key] = thumbnail;
        thumbnailSemaphore.Release();
        StateHasChanged();
    }
}
