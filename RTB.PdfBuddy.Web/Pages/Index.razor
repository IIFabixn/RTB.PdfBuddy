@page "/"
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using PdfSharpCore.Pdf
@using RTB.BlazorUI.Extensions
@using RTB.BlazorUI.Services.BusyTracker
@using RTB.BlazorUI.Services.DataNavigationService
@using RTB.PdfBuddy.Shared
@using RTB.BlazorUI.Services.DragDrop.Components
@using Microsoft.AspNetCore.Components.Sections
@using System.Net.Mime
@using System.IO.Compression
@using RTB.PdfBuddy.Shared.Extensions

@inject IJSRuntime JSRuntime
@inject IBusyTracker BusyTracker
@inject NavigationManager NavigationManager
@inject DataNavigationService DataNavigationService
@inject PdfEditor PdfEditor

@inherits RTBComponent

<FlexLayout FullHeight IsVertical>
    <FlexLayout FullHeight IsVertical class="gap-4 items-center">
        <FlexLayout IsVertical>
            <h1>Welcome to PdfBuddy!</h1>
            <p class="text-caption">PdfBuddy is a simple PDF editor that allows you to manipulate PDF files with ease, just by drag and drop!</p>
            
            <FileDropInput Id="IndexFileDrop"
                Multiple
                AcceptedTypes="@(new[] { MediaTypeNames.Application.Pdf })"
                OnInput="ImportFiles"
                class="h-full rounded flex flex-col justify-center p-4 border-2 border-white">
                <h2 class="text-center">Drag and drop your PDF files here or click to select files.</h2>
            </FileDropInput>
        </FlexLayout>

        <h2>Quick Features</h2>
        <Grid FullHeight Columns="1fr 1fr" class="gap-4">
            <GridItem class="h-full">
                <FileDropInput Id="MergeAllDrop"
                    Multiple
                    AcceptedTypes="@(new[] { MediaTypeNames.Application.Pdf })"
                    OnInput="MergeAll"
                    class="h-full rounded flex flex-col justify-center p-4 border-2 border-white">
                    <h2>Merge Documents</h2>
                    <p class="text-center text-zinc-500">Drag and drop your PDF files here or click to select files.</p>
                </FileDropInput>
            </GridItem>
            <GridItem class="h-full">
                <FileDropInput Id="SplitAllDrop"
                    Multiple
                    AcceptedTypes="@(new[] { MediaTypeNames.Application.Pdf })"
                    OnInput="SplitAll"
                    class="h-full rounded flex flex-col justify-center p-4 border-2 border-white">
                    <h2>Split Documents</h2>
                    <p class="text-center text-zinc-500">Drag and drop your PDF files here or click to select files.</p>
                </FileDropInput>
            </GridItem>
        </Grid>
    </FlexLayout>
</FlexLayout>

@code {
    private async Task<PdfDocument[]> ReadDocuments(params IBrowserFile[] files)
    {
        if (files.Length == 0) return [];
        using var busy = BusyTracker.Track("ReadingDocuments");
        var tasks = files.Select(file => Task.Run(file.LoadPdfDocument));

        return await Task.WhenAll(tasks);
    }

    private async Task ImportFiles(IBrowserFile[] files)
    {
        if (files.Length == 0) return;

        using var busy = BusyTracker.Track("ImportingFiles");

        var documents = await ReadDocuments(files);

        DataNavigationService.NavigateTo("editor", parameter: [new ("files", documents)]);
    }

    private async Task MergeAll(IBrowserFile[] files)
    {
        if (files.Length == 0) return;
        if (files.Length == 1)
        {
            await ImportFiles(files);
            return;
        }

        using var busy = BusyTracker.Track("MergeAllFiles");

        var documents = await ReadDocuments(files);
        PdfEditor.AddFileRange(documents);
        PdfEditor.MergeAll();
        var doc = PdfEditor.Files[0];

        using var memoryStream = new MemoryStream();
        doc.Save(memoryStream, false); // Save the document to the stream
        memoryStream.Position = 0; // Reset the stream position

        var fileName = doc.Info.Title ?? "Document.pdf";
        await JSRuntime.InvokeVoidAsync("exportFile", $"{(fileName)}.pdf", memoryStream.ToArray());
    }

    private async Task SplitAll(params IBrowserFile[] files)
    {
        if (files.Length == 0) return;

        using var busy = BusyTracker.Track("SplittingAll");
        var documents = await ReadDocuments(files);
        PdfEditor.AddFileRange(documents);

        using var zipStream = new MemoryStream();
        using (var archive = new ZipArchive(zipStream, System.IO.Compression.ZipArchiveMode.Create, true))
        {
            foreach (var doc in PdfEditor.Files)
            {
                var entryName = string.IsNullOrWhiteSpace(doc.Info.Title) ? "Document.pdf" : $"{(doc.Info.Title)}.pdf";
                var zipEntry = archive.CreateEntry(entryName, System.IO.Compression.CompressionLevel.Fastest);

                using var entryStream = zipEntry.Open();
                using var pdfStream = new MemoryStream();
                doc.Save(pdfStream, false); // Save the PDF document to a memory stream
                pdfStream.Position = 0; // Reset the stream position
                await pdfStream.CopyToAsync(entryStream); // Copy the PDF stream to the ZIP entry
            }
        }

        zipStream.Position = 0; // Reset the ZIP stream position
        await JSRuntime.InvokeVoidAsync("exportFile", "Documents.zip", zipStream.ToArray());
    }
}