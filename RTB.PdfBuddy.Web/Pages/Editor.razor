@page "/editor"
@using Microsoft.AspNetCore.Components.Sections
@using PdfSharpCore.Drawing
@using PdfSharpCore.Pdf
@using PdfSharpCore.Pdf.IO
@using RTB.BlazorUI.Extensions
@using Microsoft.AspNetCore.Components.Forms
@using RTB.BlazorUI.Services.BusyTracker
@using RTB.BlazorUI.Services.DataNavigationService
@using RTB.BlazorUI.Services.Dialog
@using RTB.BlazorUI.Services.DragDrop.Components
@using RTB.PdfBuddy.Shared
@using System.Net.Mime
@using System.IO.Compression
@using RTB.PdfBuddy.Shared.Extensions

@inject ILogger<Editor> Logger
@inject IJSRuntime JSRuntime
@inject DataNavigationService DataNavigationService
@inject IBusyTracker BusyTracker
@inject IDialogService DialogService
@inject PdfEditor PdfEditor

@inherits RTBComponent

<Grid FullHeight Rows="1fr auto" class="container self-center gap-4 p-8 bg-zinc-200 dark:bg-zinc-800 rounded-t box-border shadow">
    <GridItem Row="1" class="min-w-0 min-h-0 overflow-auto">
        <CollectionList IsVertical FullHeight Items="@PdfEditor.Files" TItem="PdfDocument" Context="file" class="gap-4">
            <ItemTemplate>
                <FlexLayout IsVertical class="gap-2">
                    <FlexLayout IsHorizontal class="gap-2 items-center">
                        <button class="text-red-300 px-0.5 self-end cursor-pointer" @onclick="() => RemoveFile(file)">x</button>
                        <div class="grow overflow-auto">
                            <input type="text"
                                class="border-b min-w-xs outline-none px-1 self-start max-w-full text-black"
                                placeholder="File name"
                                style="field-sizing: content;"
                                @bind-value="file.Info.Title"
                                @bind-value:event="oninput"
                                @onchange="@((e) => StateAction(() => PdfEditor.OnFileNameChange(file, e.Value?.ToString() ?? string.Empty)))" />
                        </div>
                        <button class="justify-self-end" @onclick="() => Save(file)">Save</button>
                    </FlexLayout>
                    <FlexLayout IsHorizontal class="gap-1 overflow-auto scrollbar">
                        <FlexLayout IsVertical class="justify-around shrink-0">
                            <DraggableItem TData="PdfPage[]" ItemData="@file.GetPagesAsArray()"> 
                                <Icon IconName="Drag" Width="24" Height="24" class="text-black" />
                            </DraggableItem>
                        </FlexLayout>
                        @for (var pageIndex = 0; pageIndex < file.PageCount; pageIndex++)
                        {
                            var capturedIndex = pageIndex;
                            var capturedPage = file.Pages[capturedIndex];
                            <DropZone class="h-full min-w-2 rounded" DraggingClass="bg-blue-100" TObject="PdfPage[]" OnObjectDropped="pages => StateAction(() => PdfEditor.MovePageToFileAtIndex(file, capturedIndex, pages))" />

                            <DraggableItem TData="PdfPage[]" ItemData="@(SelectedPages.Contains(capturedPage) ? SelectedPages.ToArray() : new[] { capturedPage })">
                                <FlexLayout @onclick="() => ToggleSelection(capturedPage)" IsVertical class="@($"{(SelectedPages.Contains(capturedPage) ? "border-red-400" : "border-white")} group h-24 text-xs border-2 rounded-tr flex flex-col justify-center w-16 overflow-clip relative")">
                                    <div class="absolute top-1 right-1 collapse group-hover:visible">
                                        <button type="button" class="w-4 rounded h-4 bg-white shadow text-red-400 grid content-center leading-0 align-middle" @onclick="@(() => StateAction(() => PdfEditor.RemovePageFromFile(file, capturedPage)))">
                                            x
                                        </button>
                                        <button type="button" class="w-4 rounded h-4 bg-white shadow text-red-400 grid content-center leading-0 align-middle" @onclick="() => ShowFullscren(capturedPage)">
                                            O
                                        </button>
                                    </div>
                                    <PdfViewer Page="capturedPage" class="border" />
                                </FlexLayout>
                            </DraggableItem>
                        }
                        <!-- Drop after the last page -->
                        <DropZone class="h-full min-w-2 grow" TObject="PdfPage[]" OnObjectDropped="(page) => StateAction(() => PdfEditor.MovePageToFileAtIndex(file, file.PageCount - 1, page))" />
                    </FlexLayout>
                </FlexLayout>
            </ItemTemplate>
        </CollectionList>
    </GridItem>
    <GridItem Row="2">
        <FlexLayout IsHorizontal class="gap-2 items-center">
            <DropZone class="grow" TObject="PdfPage[]" OnObjectDropped="@(pages => StateAction(() => PdfEditor.MovePagesToNewFile(pages)))">
                <FileDropInput Id="EditorNewDocumentDropArea" Multiple OnInput="FileAdded"
                AcceptedTypes="@(new[] { MediaTypeNames.Application.Pdf })">
                    <div class="border rounded min-h-18 flex flex-col p-2 justify-center text-gray-400 text-sm">
                        <p class="max-w-lg">
                            Create New Document by dragging pages of existing files into here or
                            import new files by dragging them into here
                        </p>
                    </div>
                </FileDropInput>
            </DropZone>
            <FlyoutMenu @ref="ActionFlyout" Position="FlyoutMenu.FlyoutPosition.Up">
                <Activator>
                    <div class="w-12 h-12 grid place-items-center">
                        <Icon IconName="Action" Width="48" Height="48" />
                    </div>
                </Activator>
                <ChildContent>
                    <FlexLayout IsVertical class="gap-1 items-center *:cursor-pointer w-16">
                        <button type="button" @onclick="() => StateAction(PdfEditor.SplitAll)">
                            <Icon IconName="Split" Width="24" Height="24" class="stroke-black hover:stroke-red-400" />
                        </button>
                        <button type="button" @onclick="() => StateAction(PdfEditor.MergeAll)">
                            <Icon IconName="Merge" Width="24" Height="24" class="stroke-black hover:stroke-red-400" />
                        </button>
                        <button type="button" @onclick="SaveAll">
                            <Icon IconName="Download" Width="24" Height="24" class="stroke-black hover:stroke-red-400" />
                        </button>
                    </FlexLayout>
                </ChildContent>
            </FlyoutMenu>
        </FlexLayout>
    </GridItem>
</Grid>

@code {
    private HashSet<PdfPage> SelectedPages { get; set; } = [];
    private FlyoutMenu ActionFlyout { get; set; } = default!;

    protected override void OnInitialized()
    {
        if (DataNavigationService.TryGetData<PdfDocument[]>("files", out var files) && files?.Length > 0)
        {
            PdfEditor.AddFileRange(files);
        }
    }

    private void RemoveFile(PdfDocument model)
    {
        PdfEditor.RemoveFile(model);
        StateHasChanged();
    }

    private async void FileAdded(IBrowserFile[] files)
    {
        using var busy = BusyTracker.Track("FileAdded");
        var loadTasks = files.Select(file => Task.Run(file.LoadPdfDocument));
        var loadedFiles = await Task.WhenAll(loadTasks);
        PdfEditor.AddFileRange(loadedFiles);

        Logger.LogDebug($"Added {files.Length} files to editor");
        StateHasChanged();
    }


    private void ToggleSelection(PdfPage page)
    {
        if (SelectedPages.Contains(page))
            SelectedPages.Remove(page);
        else
            SelectedPages.Add(page);
    }

    private void ShowFullscren(PdfPage page)
    {
        DialogService.ShowAsync<PdfViewerDialog>(page.Owner.Info.Title, new() { [nameof(PdfViewerDialog.Pages)] = page.Owner.Pages, [nameof(PdfViewerDialog.PageIndex)] = page.Owner.GetPageIndex(page) });
    }

    private async Task Save(PdfDocument doc)
    {
        using var memoryStream = new MemoryStream();
        doc.Save(memoryStream, false); // Save the document to the stream
        memoryStream.Position = 0; // Reset the stream position

        var fileName = doc.Info.Title ?? "Document.pdf";
        await JSRuntime.InvokeVoidAsync("exportFile", $"{(fileName)}.pdf", memoryStream.ToArray());
    }

    private async Task SaveAll()
    {
        using var busy = BusyTracker.Track("SaveAll");
        using var zipStream = new MemoryStream();
        using (var archive = new ZipArchive(zipStream, System.IO.Compression.ZipArchiveMode.Create, true))
        {
            foreach (var doc in PdfEditor.Files)
            {
                var entryName = string.IsNullOrWhiteSpace(doc.Info.Title) ? "Document.pdf" : $"{(doc.Info.Title)}.pdf";
                var zipEntry = archive.CreateEntry(entryName, System.IO.Compression.CompressionLevel.Fastest);

                using var entryStream = zipEntry.Open();
                using var pdfStream = new MemoryStream();
                doc.Save(pdfStream, false); // Save the PDF document to a memory stream
                pdfStream.Position = 0; // Reset the stream position
                await pdfStream.CopyToAsync(entryStream); // Copy the PDF stream to the ZIP entry
            }
        }

        zipStream.Position = 0; // Reset the ZIP stream position
        await JSRuntime.InvokeVoidAsync("exportFile", "Documents.zip", zipStream.ToArray());

        ActionFlyout.CloseMenu();
        StateHasChanged();
    }

    private void StateAction(Action action)
    {
        action();
        StateHasChanged();
    }
}