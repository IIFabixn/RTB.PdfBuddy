@page "/editor"
@using Microsoft.AspNetCore.Components.Sections
@using PdfSharpCore.Pdf
@using RTB.BlazorUI.Extensions
@using Microsoft.AspNetCore.Components.Forms
@using RTB.BlazorUI.Services.BusyTracker
@using RTB.BlazorUI.Services.DataNavigationService
@using RTB.BlazorUI.Services.DragDrop.Components
@using RTB.PdfBuddy.Web.Extensions

@inject ILogger<Editor> Logger
@inject DataNavigationService DataNavigationService
@inject BusyTracker BusyTracker
@inherits RTBComponent

<Grid Rows="1fr auto" class="gap-4">
	<GridItem Row="1" class="min-w-0 min-h-0 overflow-auto">
		<CollectionList IsVertical FullHeight Items="@Files" TItem="PdfDocument" Context="file" class="gap-4">
			<ItemTemplate>
				<FlexLayout IsVertical class="gap-2">
					<div>
						<button class="text-red-300 px-0.5 self-end cursor-pointer" @onclick="() => RemoveFile(file)">x</button>
						<input type="text"
						class="border-b min-w-xs outline-none px-1 self-start min-w-42 max-w-full"
						placeholder="File name"
						style="field-sizing: content;"
						@bind-value="file.Info.Title" />
					</div>
					<DropZone TObject="PdfPage" OnObjectDropped="@(page => AddPageToFile(file, page))">
						<FlexLayout IsHorizontal class="gap-1">
							@foreach(var pageIndex in Enumerable.Range(0, file.PageCount - 1))
							{
								<DraggableItem ItemData="@file.Pages[pageIndex]">
									<FlexLayout IsVertical class="h-24 text-xs border-2 rounded-tr flex flex-col justify-between p-1 w-16">
										<span>@pageIndex</span>
									</FlexLayout>
								</DraggableItem>
							}
						</FlexLayout>
					</DropZone>
				</FlexLayout>
			</ItemTemplate>
		</CollectionList>
	</GridItem>
	<GridItem Row="2">
		<DropZone TObject="PdfPage" OnObjectDropped="PageMovedToNewFile">
			<FileDropInput Id="EditorNewDocumentDropArea" OnFileSelected="FileAdded">
				<div class="border rounded min-h-18 flex flex-col p-2 justify-center text-gray-400 text-sm">
					<p class="max-w-lg">Create New Document by dragging pages of existing files into here or
						import new files by dragging them into here</p>
				</div>
			</FileDropInput>
		</DropZone>
	</GridItem>
</Grid>

@code {
	public List<PdfDocument> Files { get; set; } = [];

	protected override void OnInitialized()
	{
		if (DataNavigationService.TryGetData<PdfDocument[]>("files", out var files) && files?.Length > 0)
		{
			Files.AddRange(files);
		}
	}

	private void RemoveFile(PdfDocument model)
	{
		if (!Files.Contains(model)) return;

		Files.Remove(model);

		StateHasChanged();
	}

	private async void FileAdded(InputFileChangeEventArgs args)
	{
		using (BusyTracker.Track("FileAdded"))
		{
			var fileTasks = args.GetMultipleFiles().Select(f => f.LoadPdfDocument());
			var files = await Task.WhenAll(fileTasks);
			Files.AddRange(files);
			StateHasChanged();
		}
	}

	private void AddPageToFile(PdfDocument file, PdfPage page)
	{
	}

	private void PageMovedToNewFile(PdfPage? args)
	{
		var doc = new PdfDocument();
		doc.Info.Title = "New Document";
		doc.AddPage(args);
		Files.Add(doc);
		StateHasChanged(); // Trigger re-render if needed
		Logger.LogDebug($"Page moved to new file: {args}");
    }
}